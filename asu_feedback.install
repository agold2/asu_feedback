<?php
/**
 * @file
 * Install and uninstall functions for the ASU Feedback module.
 */

/*
 * Impements hook_info()
 */
function asu_feedback_node_info() {
  return array(
    'asu_feedback' => array(
      'name' => t('ASU Feedback'),
      'base' => 'node_content',
      'description' => t('A webform-enabled content type used by the ASU Feedback module.'),
      'has_title' => TRUE,
      'locked' => TRUE,
    ),
  );
}

function asu_feedback_install() {

  $help_field = field_info_field('asu_feedback_help');
  $instance = field_info_instance('node', 'asu_feedback_help', 'article');

  if (empty($help_field)) {
    $help_field = array(
      'field_name' => 'asu_feedback_help',
      'type' => 'link_field',
      'entity_types' => array('node'),
    /*  'settings' => array(
        'title' => 'none',
        'attributes' => array(
          'target' => '_blank',
        ),
),*/
    );

    $help_field = field_create_field($help_field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => 'asu_feedback_help',
      'entity_type' => 'node',
      'bundle' => 'asu_feedback',
      'label' => st('Help Link'),
      'settings' => array(
        'title' => 'none',
        'attributes' => array(
          'target' => '_blank',
        ),
      ),
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'type' => 'hidden',
        ),
      ),
    );


  field_create_instance($instance);

  }

  // Ensure the asu_feedback content type is available.
  node_types_rebuild();
  $types = node_type_get_types();
  node_add_body_field($types['asu_feedback']);

  // Enable webform on new content type
  $webform_types = webform_variable_get('webform_node_types');
  $webform_types[] = 'asu_feedback';
  variable_set('webform_node_types', $webform_types);


  $i = 0;
  $types = array(
    0 => array(
      'fid' => 1,
      'title' => 'Leave Feedback',
      'body' => 'Your opinions and comments are very important to us, and we read every message that we receive. Due to a high volume of messages, weâ€™re not always able to provide a personal response, but we do appreciate your taking the time to fill out our feedback form below.',
      'submit_limit' => 0,
      'path' => 'feedback',
    ),
    1 => array(
      'fid' => 2,
      'title' => 'Request Access',
      'body' => 'Please request access to manage a page below.',
      'submit_limit' => 1,
      'path' => 'request-access'
    ),
  );

  foreach ($types as $type) {
    // Create the webform components array.
    $components = array();
    $components[$i] = array(
    'cid' => $i,
    'pid' => '0',
    'form_key' => 'asu_feedback_' . $i,
    'name' => $type['title'],
    'type' => 'number',
    'value' => '',
    'extra' => array(
      'title_display' => 'before',
      'private' => 0,
      'type' => 'textfield',
      'decimals' => '',
      'separator' => ',',
      'point' => '.',
      'unique' => 0,
      'integer' => 0,
      'conditional_operator' => '=',
      'excludezero' => 0,
      'field_prefix' => '',
      'field_suffix' => '',
      'description' => '',
      'attributes' => array(),
      // The number has to be positive.
      'min' => '0',
      'max' => '',
      'step' => '',
      'conditional_component' => '',
      'conditional_values' => '',
    ),
    'mandatory' => '0',
    'weight' => $i,
    'page_num' => 1,
  );

  $n = new stdClass();
  $n->type = 'asu_feedback';
  $n->title = $type['title'];
  node_save($n);

  $path = array();
  $path['source'] = 'node/' . $n->nid;
  $path['alias'] = $type['path'];
  path_save($path);

  _add_webform_components($n);

  // Do not display post information
  variable_set(node_submitted_asu_feedback, 0);

  $i++;

  }
}

function asu_feedback_uninstall() {
  /* TODO: variable_del()  */
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'asu_feedback'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  node_delete_multiple($nids);



}


function _add_webform_components($node) {
  $components = array(
    0 => array(
      'name' => 'Source',
      'form_key' => 'source',
      'type' => 'textfield',
      'weight' => 1,
      'pid' => 0,
      'value' => '%get[refer]',
      'extra' => array(
        'disabled' => TRUE,
        'title_display' => 'inline',
      ),
    ),
    1 => array(
      'name' => 'ASURITE',
      'form_key' => 'asurite',
      'type' => 'textfield',
      'weight' => 2,
      'pid' => 0,
      'value' => '%username',
      'extra' => array(
        'disabled' => TRUE,
        'title_display' => 'inline',
      ),
    ),
    2 => array(
      'name' => 'Message',
      'form_key' => 'message',
      'type' => 'textarea',
      'weight' => 3,
      'pid' => 0,
    ),
  );

  webform_ensure_record($node);
  foreach ($components as $component) {
    $component['nid'] = $node->nid;
    $node->webform['components'][] = $component;
    webform_component_insert($component);
  }
  $email = array(
    'nid' => $node->nid,
    'email' => variable_get('site_mail', 'CHANGEME@example.com'),
    'subject' => 'default',
    'from_name' => 'default',
    'from_address' => 'default',
    'template' => 'default',
    'excluded_components' => array(),
  );
  webform_email_insert($email);
}
