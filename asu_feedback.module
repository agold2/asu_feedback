<?php

/**
 * @file
 * Handle Feedback types
 */

/**
 * Implements hook_help().
 */
function asu_feedback_help($path, $arg) {
  switch ($path) {
    case 'admin/help#asu_feedback':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The ASU Feedback module allows.....') . '</p>';
      return $output;

    case 'admin/config/asu_feedback':
      $output = '<p>' . t('ASU Feedback Moulde description goes here. Learn more on the <a href="@asufeedbackhelp">ASU Feedback module help page</a>.', array('@asufeedbackhelp' => url('admin/help/asu_feedback'))) . '</p>';
      return $output;
  }
}


/**
 * Implements hook_menu().
 */
function asu_feedback_menu() {
  return array(
    'admin/config/asu_feedback' => array(
      'title' => 'ASU Feedback',
      'description' => 'Configure visibility of feedback options',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('asu_feedback_admin_settings'),
      'access arguments' => array('administer feedback types'),
     'file' => 'asu_feedback.admin.inc',
    ),
  );
}


/**
 * Implements hook_permission().
 */
function asu_feedback_permission() {
  $perms['administer feedback types'] = array(
    'title' => t('Administer feedback types'),
    'restrict access' => TRUE,
  );
  $perms['give feedback'] = array(
    'title' => t('Give feedback'),
    'restrict access' => TRUE,
  );
  return $perms;
}


/**
 * Implements hook_init().
 */
function asu_feedback_init() {
    $path = drupal_get_path('module', 'asu_feedback');
    drupal_add_css($path . '/asu_feedback.css');
    drupal_add_library('cluetip', 'cluetip');
    drupal_add_js($path . '/asu_feedback.js');
}

/**
 * Implements hook_page_build().
 */
function asu_feedback_page_build(&$page) {
	$buttons = array(
	  0 => array(
      'fid' => 1,
       'title' => 'Leave Feedback',
       'url' => 'feedback',
       'visibility' => variable_get('asu_feedback_visibility', ''),
			 'paths' => variable_get('asu_feedback_paths', ''),
		),
		1 => array(
		  'fid' => 2,				
			'title' => 'Request Access',
			'url' => 'request-access',
			'visibility' => variable_get('asu_feedback_access_visibility', ''),
      'paths' => variable_get('asu_feedback_access', ''),
		),
	);

  $help_nid = variable_get('asu_feedback_help_nid', '');
  $help_link = variable_get('asu_feedback_help_link', '');
	if ($help_link) {
	  $buttons[] = array(				
		    'fid' => 3,				
			  'title' => 'Help',
			  'url' => $help_link,
			  'visibility' => 1, // TODO: Remove
			  'paths' => $help_nid, // TODO: Remove
      );
	}
 
  //$path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
  //if ($path == $help_nid 
    //SELECT help_link from {help_link} where nid = current_path;
    //$url = '<li class="asu-feedback-help">' ;
  $i = 0;
  $links = array();
  $items = array();
  $class = 'asu-feedback';
	$cas = '';
  if (!user_is_logged_in()) {
    $cas = 'cas?destination=';
  }
  foreach ($buttons as $b) {
    if (asu_feedback_match_path($b['paths'], $b['visibility'])) {
      global $base_url;
      $url = $base_url . '/' . $cas . $b['url'];

      $li_class = array($i => $class . '-' . $b['fid']);
      $options = array(
        'attributes' => array('target'=>'_blank'), 
        'query' => array(
	        'refer' => $base_url . '/' . urlencode(drupal_get_path_alias($_GET['q'])),
	      ),
      );
      $links[] =  l($b['title'], $url, $options);
      $items[] = array(
	      'data' => $links[$i],
	      'class' => $li_class);

      $i++;
    }
  }

  if ($i == 0) { 
    return FALSE; 
  }

  $output = theme('item_list', array('items' => $items, 'attributes' => array('class' =>  $class) ));

  $page['content']['asu_feedback'] = array(
    '#title' => t('Feedback'),
    '#markup' => $output,
    '#prefix' => '<div id="asu-feedback-button"><span class="' . $class . '-cluetip"' . ' rel="#' . $class.'-tooltip"></span></div><div id="' . $class . '-tooltip">',
    '#suffix' => '</div>',
  );
      
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Adds link field to related Help article to the node form.
 *
 * @see asu_feedback_node_submit()
 */

//function asu_feedback_form_node_form_alter(&$form, $form_state) {
  //$type = $form['#node']->type;
/*
  $form['help'] = array(
    '#type' => 'fieldset',
    '#title' => t('Menu settings'),
    '#access' => user_access('administer menu'),
    '#collapsible' => TRUE,
    '#collapsed' => !$link['link_title'],
    '#group' => 'additional_settings',
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'menu') . '/menu.js'),
    ),
    '#tree' => TRUE,
    '#weight' => -2,
    '#attributes' => array('class' => array('menu-link-form')),
  );
 */
  /*
  $form['menu']['link'] = array(
    '#type' => 'container',
    '#parents' => array('menu'),
    '#states' => array(
      'invisible' => array(
        'input[name="menu[enabled]"]' => array('checked' => FALSE),
      ),
    ),
  );
   */
/*
  $form['help']['link'] = array(
      '#type' => 'textfield',
    '#title' => t('Help link'),
  );

}

function asu_feedback_node_submit($form, &$form_state) {
  variable_set('asu_feedback_help_link', $form_state['help']['link']['#value']);
  variable_set('asu_feedback_help_nid', $form->nid);

}
 */

/**
 * Check if the current path matches any pattern in a set of patterns.
 *
 * @param $patterns
 *   String containing a set of patterns separated by \n, \r or \r\n.
 *
 * @param $visibility
 *   1 to include paths, 0 to exclude paths 
 *
 * @return
 *   Boolean value: TRUE if the current path or alias matches a pattern.
 */
function asu_feedback_match_path($patterns, $visibility) {
  // Convert path to lowercase. This allows comparison of the same path
  // with different case. Ex: /Page, /page, /PAGE.
  $patterns = drupal_strtolower($patterns);

  // Convert the current path to lowercase.
  $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));

  // Compare the lowercase internal and lowercase path alias (if any).
  $page_match = drupal_match_path($path, $patterns);
  if ($path != $_GET['q']) {
    $page_match = $page_match || drupal_match_path($_GET['q'], $patterns);
  }
  
  if (($visibility) && ($page_match)) {
    return 1;
  }
  elseif (($visibility == 0) && ($page_match == 0)) {
    return 1;
  }
  else {
    return 0;
  }
}

